name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build (repo build)
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check Vercel credentials
        id: check-creds
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ] || [ -z "${{ secrets.VERCEL_ORG_ID }}" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "have-creds=false" >> $GITHUB_OUTPUT
            echo "⚠️ Missing Vercel secrets: set VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID in repo secrets" >&2
          else
            echo "have-creds=true" >> $GITHUB_OUTPUT
            echo "✓ Vercel credentials found"
          fi

      - name: Pull Vercel env (production)
        if: steps.check-creds.outputs.have-creds == 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build with Vercel (prebuilt)
        if: steps.check-creds.outputs.have-creds == 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npx vercel build --prod --token "$VERCEL_TOKEN"

      - name: Deploy to Vercel (production)
        id: vercel-deploy
        if: steps.check-creds.outputs.have-creds == 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          url=$(npx vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN")
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Create GitHub Deployment
        if: steps.check-creds.outputs.have-creds == 'true'
        id: gh-deploy
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              required_contexts: [],
              environment: 'production',
              description: 'Vercel Production Deploy',
              auto_merge: false
            });
            core.setOutput('deployment_id', deployment.id.toString());

      - name: Set Deployment Status (success)
        if: steps.check-creds.outputs.have-creds == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: Number('${{ steps.gh-deploy.outputs.deployment_id }}'),
              state: 'success',
              environment: 'production',
              environment_url: '${{ steps.vercel-deploy.outputs.url }}',
              description: 'Vercel production deployment is live'
            });

      - name: Summary
        if: steps.check-creds.outputs.have-creds == 'true'
        run: |
          echo "Production URL: ${{ steps.vercel-deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY

      - name: Skip summary (missing creds)
        if: steps.check-creds.outputs.have-creds != 'true'
        run: |
          echo "Vercel deployment skipped. Add repository secrets: VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID." >> $GITHUB_STEP_SUMMARY