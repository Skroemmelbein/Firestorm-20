import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    email: v.string(),
    password_hash: v.optional(v.string()),
    first_name: v.optional(v.string()),
    last_name: v.optional(v.string()),
    role: v.union(v.literal("admin"), v.literal("manager"), v.literal("user")),
    status: v.union(v.literal("active"), v.literal("inactive"), v.literal("suspended")),
    phone: v.optional(v.string()),
    avatar_url: v.optional(v.string()),
    last_login: v.optional(v.number()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_email", ["email"]).index("by_status", ["status"]),

  clients: defineTable({
    name: v.string(),
    email: v.optional(v.string()),
    phone: v.optional(v.string()),
    address: v.optional(v.string()),
    status: v.union(v.literal("active"), v.literal("inactive"), v.literal("suspended")),
    subscription_tier: v.union(v.literal("basic"), v.literal("premium"), v.literal("enterprise")),
    created_by: v.id("users"),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_status", ["status"]).index("by_created_by", ["created_by"]),

  members: defineTable({
    user_id: v.optional(v.id("users")),
    client_id: v.optional(v.id("clients")),
    member_id: v.string(),
    first_name: v.optional(v.string()),
    last_name: v.optional(v.string()),
    email: v.optional(v.string()),
    phone: v.optional(v.string()),
    tier: v.union(v.literal("basic"), v.literal("premium"), v.literal("elite"), v.literal("executive")),
    status: v.union(v.literal("active"), v.literal("inactive"), v.literal("pending"), v.literal("suspended")),
    engagement_score: v.optional(v.number()),
    total_spend: v.optional(v.number()),
    last_active: v.optional(v.number()),
    location: v.optional(v.string()),
    permissions: v.optional(v.any()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_user", ["user_id"]).index("by_client", ["client_id"]).index("by_member_id", ["member_id"]).index("by_email", ["email"]),

  communications: defineTable({
    channel: v.union(v.literal("sms"), v.literal("mms"), v.literal("email"), v.literal("voice"), v.literal("chat"), v.literal("conversation")),
    direction: v.union(v.literal("inbound"), v.literal("outbound")),
    to_number: v.optional(v.string()),
    from_number: v.optional(v.string()),
    to_email: v.optional(v.string()),
    from_email: v.optional(v.string()),
    content: v.string(),
    subject: v.optional(v.string()),
    status: v.union(v.literal("queued"), v.literal("sent"), v.literal("delivered"), v.literal("failed"), v.literal("bounced"), v.literal("read")),
    provider: v.union(v.literal("twilio"), v.literal("sendgrid"), v.literal("other")),
    provider_id: v.optional(v.string()),
    provider_status: v.optional(v.string()),
    cost: v.optional(v.number()),
    error_message: v.optional(v.string()),
    metadata: v.optional(v.any()),
    client_id: v.optional(v.id("clients")),
    user_id: v.optional(v.id("users")),
    member_id: v.optional(v.id("members")),
    sent_at: v.optional(v.number()),
    delivered_at: v.optional(v.number()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_client", ["client_id"]).index("by_user", ["user_id"]).index("by_member", ["member_id"]).index("by_channel", ["channel"]).index("by_status", ["status"]),

  subscriptions: defineTable({
    client_id: v.optional(v.id("clients")),
    user_id: v.optional(v.id("users")),
    member_id: v.optional(v.id("members")),
    plan_name: v.string(),
    plan_type: v.union(v.literal("monthly"), v.literal("yearly"), v.literal("one-time")),
    amount: v.number(),
    currency: v.string(),
    status: v.union(v.literal("active"), v.literal("inactive"), v.literal("cancelled"), v.literal("past_due"), v.literal("paused")),
    nmi_customer_id: v.optional(v.string()),
    nmi_subscription_id: v.optional(v.string()),
    next_billing_date: v.optional(v.number()),
    trial_end_date: v.optional(v.number()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_client", ["client_id"]).index("by_user", ["user_id"]).index("by_member", ["member_id"]).index("by_status", ["status"]).index("by_nmi_customer", ["nmi_customer_id"]),

  transactions: defineTable({
    subscription_id: v.optional(v.id("subscriptions")),
    client_id: v.optional(v.id("clients")),
    user_id: v.optional(v.id("users")),
    member_id: v.optional(v.id("members")),
    transaction_id: v.string(),
    nmi_transaction_id: v.optional(v.string()),
    amount: v.number(),
    currency: v.string(),
    type: v.union(v.literal("charge"), v.literal("refund"), v.literal("chargeback")),
    status: v.union(v.literal("pending"), v.literal("completed"), v.literal("failed"), v.literal("cancelled")),
    payment_method: v.optional(v.string()),
    description: v.optional(v.string()),
    metadata: v.optional(v.any()),
    processed_at: v.optional(v.number()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_subscription", ["subscription_id"]).index("by_client", ["client_id"]).index("by_transaction_id", ["transaction_id"]).index("by_status", ["status"]),

  campaigns: defineTable({
    name: v.string(),
    description: v.optional(v.string()),
    type: v.union(v.literal("sms"), v.literal("email"), v.literal("mixed")),
    status: v.union(v.literal("draft"), v.literal("active"), v.literal("paused"), v.literal("completed")),
    target_audience: v.optional(v.any()),
    message_template: v.optional(v.string()),
    schedule_type: v.union(v.literal("immediate"), v.literal("scheduled"), v.literal("recurring")),
    scheduled_at: v.optional(v.number()),
    created_by: v.id("users"),
    client_id: v.optional(v.id("clients")),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_status", ["status"]).index("by_created_by", ["created_by"]).index("by_client", ["client_id"]),

  benefits: defineTable({
    name: v.string(),
    description: v.optional(v.string()),
    type: v.union(v.literal("discount"), v.literal("reward"), v.literal("access"), v.literal("service")),
    value: v.optional(v.string()),
    tier_requirement: v.optional(v.union(v.literal("basic"), v.literal("premium"), v.literal("elite"), v.literal("executive"))),
    status: v.union(v.literal("active"), v.literal("inactive")),
    client_id: v.optional(v.id("clients")),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_type", ["type"]).index("by_status", ["status"]).index("by_client", ["client_id"]),

  member_benefits: defineTable({
    member_id: v.id("members"),
    benefit_id: v.id("benefits"),
    status: v.union(v.literal("active"), v.literal("used"), v.literal("expired")),
    granted_at: v.number(),
    expires_at: v.optional(v.number()),
    used_at: v.optional(v.number()),
  }).index("by_member", ["member_id"]).index("by_benefit", ["benefit_id"]).index("by_status", ["status"]),

  analytics: defineTable({
    metric_name: v.string(),
    metric_value: v.number(),
    metric_type: v.union(v.literal("counter"), v.literal("gauge"), v.literal("histogram")),
    dimensions: v.optional(v.any()),
    client_id: v.optional(v.id("clients")),
    user_id: v.optional(v.id("users")),
    recorded_at: v.number(),
  }).index("by_metric_name", ["metric_name"]).index("by_client", ["client_id"]).index("by_recorded_at", ["recorded_at"]),

  settings: defineTable({
    key: v.string(),
    value: v.any(),
    type: v.union(v.literal("system"), v.literal("client"), v.literal("user")),
    client_id: v.optional(v.id("clients")),
    user_id: v.optional(v.id("users")),
    description: v.optional(v.string()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_key", ["key"]).index("by_type", ["type"]).index("by_client", ["client_id"]).index("by_user", ["user_id"]),

  webhooks: defineTable({
    provider: v.string(),
    event_type: v.string(),
    payload: v.any(),
    status: v.union(v.literal("received"), v.literal("processed"), v.literal("failed")),
    processed_at: v.optional(v.number()),
    error_message: v.optional(v.string()),
    created_at: v.number(),
  }).index("by_provider", ["provider"]).index("by_event_type", ["event_type"]).index("by_status", ["status"]),

  conversations: defineTable({
    conversation_sid: v.string(),
    friendly_name: v.optional(v.string()),
    client_id: v.optional(v.id("clients")),
    member_id: v.optional(v.id("members")),
    status: v.union(v.literal("active"), v.literal("inactive"), v.literal("closed")),
    participant_count: v.optional(v.number()),
    message_count: v.optional(v.number()),
    created_at: v.number(),
    updated_at: v.number(),
  }).index("by_conversation_sid", ["conversation_sid"]).index("by_client", ["client_id"]).index("by_member", ["member_id"]).index("by_status", ["status"]),
});
